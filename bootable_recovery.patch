#       modified:   Android.mk
#       modified:   default_recovery_ui.c
#       modified:   extendedcommands.c
#       modified:   recovery.c
#       modified:   recovery_ui.h
#       modified:   ui.c
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       adefines.h
#       minui/lucidaconsole_10x18.h
diff --git a/bootable/recovery/Android.mk b/bootable/recovery/Android.mk
index 661a103..952fc6e 100644
--- a/bootable/recovery/Android.mk
+++ b/bootable/recovery/Android.mk
@@ -37,6 +37,19 @@ LOCAL_FORCE_STATIC_EXECUTABLE := true
 
 RECOVERY_FSTAB_VERSION := 2
 
+ifeq ($(TARGET_PRODUCT),cm_lotus)
+  LOCAL_CFLAGS += -DXPERIA_GO
+endif
+ifeq ($(TARGET_PRODUCT),cm_pepper)
+  LOCAL_CFLAGS += -DXPERIA_SOLA
+endif
+ifeq ($(TARGET_PRODUCT),cm_kumquat)
+  LOCAL_CFLAGS += -DXPERIA_U
+endif
+ifeq ($(TARGET_PRODUCT),cm_nypon)
+  LOCAL_CFLAGS += -DXPERIA_P
+endif
+
 ifdef I_AM_KOUSH
 RECOVERY_NAME := ClockworkMod Recovery
 LOCAL_CFLAGS += -DI_AM_KOUSH
diff --git a/bootable/recovery/default_recovery_ui.c b/bootable/recovery/default_recovery_ui.c
index 032c1b3..79502d4 100644
--- a/bootable/recovery/default_recovery_ui.c
+++ b/bootable/recovery/default_recovery_ui.c
@@ -29,6 +29,7 @@ char* MENU_ITEMS[] = { "reboot system now",
                        "backup and restore",
                        "mounts and storage",
                        "advanced",
+                       "about",
                        NULL };
 
 void device_ui_init(UIParameters* ui_parameters) {
diff --git a/bootable/recovery/extendedcommands.c b/bootable/recovery/extendedcommands.c
index b31de1c..45528c7 100644
--- a/bootable/recovery/extendedcommands.c
+++ b/bootable/recovery/extendedcommands.c
@@ -32,6 +32,7 @@
 #include "recovery_ui.h"
 
 #include "extendedcommands.h"
+#include "adefines.h"
 #include "recovery_settings.h"
 #include "nandroid.h"
 #include "mounts.h"
@@ -162,7 +163,7 @@ int install_zip(const char* packagefilepath) {
     }
 #endif
 
-    ui_set_background(BACKGROUND_ICON_NONE);
+    ui_set_background(BACKGROUND_ICON_CLOCKWORK);
     ui_print("\nInstall from sdcard complete.\n");
     return 0;
 }
@@ -509,28 +510,98 @@ static int control_usb_storage(bool on) {
     return num;
 }
 
-void show_mount_usb_storage_menu() {
-    // Enable USB storage using vold
-    if (!control_usb_storage(true))
-        return;
-
-    static const char* headers[] = { "USB Mass Storage device",
-                                     "Leaving this menu unmounts",
-                                     "your SD card from your PC.",
-                                     "",
-                                     NULL
+void show_mount_usb_storage_menu()
+{
+    static char lun_command_enable_int[120];
+    static char lun_command_disable_int[100];
+    static char lun_command_enable_ext[120];
+    static char lun_command_disable_ext[100];
+
+    snprintf(lun_command_enable_int, sizeof(lun_command_enable_int), "/sbin/echo \"%s\" > %s", BOARD_VOLD_SDCARD_VOLUME_INT, BOARD_UMS_LUNFILE);
+    snprintf(lun_command_disable_int, sizeof(lun_command_disable_int), "/sbin/echo \"\" > %s", BOARD_UMS_LUNFILE);
+    snprintf(lun_command_enable_ext, sizeof(lun_command_enable_ext), "/sbin/echo \"%s\" > %s", BOARD_VOLD_SDCARD_VOLUME_EXT, BOARD_UMS_LUNFILE);
+    snprintf(lun_command_disable_ext, sizeof(lun_command_disable_ext), "/sbin/echo \"\" > %s", BOARD_UMS_LUNFILE);
+
+    static const char* sdheaders[] = {  "SD card mounts",
+                                        "",
+                                        NULL
     };
 
-    static char* list[] = { "Unmount", NULL };
+    static char* sdlist[] = { "Mount int SD",
+#ifdef HAVE_EXTERNAL_SDCARD
+                              "Mount ext SD",
+#endif
+                              NULL
+    };
 
-    for (;;) {
-        int chosen_item = get_menu_selection(headers, list, 0, 0);
-        if (chosen_item == GO_BACK || chosen_item == 0)
+    for (;;)
+    {
+        int chosen_item = get_menu_selection(sdheaders, sdlist, 0, 0);
+        if (chosen_item == GO_BACK)
             break;
-    }
+        switch (chosen_item)
+        {
+            case 0:
+            {
+                // Enable USB storage using vold
+                if (!control_usb_storage(true))
+                    return;
+
+                static const char* headers[] = {  "USB Mass Storage device",
+                                           "Leaving this menu unmounts",
+                                           "your int SD card from your PC.",
+                                            "",
+                                            NULL
+                };
+
+                __system(lun_command_enable_int);
+                static char* list[] = { "Unmount", NULL };
+
+                for (;;)
+                {
+                    int chosen_item = get_menu_selection(headers, list, 0, 0);
+                    if (chosen_item == GO_BACK || chosen_item == 0)
+                        break;
+                }
+
+                // Disable USB storage
 
-    // Disable USB storage
-    control_usb_storage(false);
+                __system(lun_command_disable_int);
+                control_usb_storage(false);
+                break;
+            }
+#ifdef HAVE_EXTERNAL_SDCARD
+            case 1:
+            {
+                // Enable USB storage using vold
+                if (!control_usb_storage(true))
+                    return;
+
+                static const char* headers[] = {  "USB Mass Storage device",
+                                           "Leaving this menu unmounts",
+                                           "your ext SD card from your PC.",
+                                            "",
+                                            NULL
+                };
+
+                __system(lun_command_enable_ext);
+                static char* list[] = { "Unmount", NULL };
+
+                for (;;)
+                {
+                    int chosen_item = get_menu_selection(headers, list, 0, 0);
+                    if (chosen_item == GO_BACK || chosen_item == 0)
+                        break;
+                }
+
+                // Disable USB storage
+                __system(lun_command_disable_ext);
+                control_usb_storage(false);
+                break;
+            }
+#endif
+        }
+    }
 }
 
 int confirm_selection(const char* title, const char* confirm) {
@@ -1401,11 +1472,44 @@ int can_partition(const char* volume) {
 
 
 #ifdef ENABLE_LOKI
-#define FIXED_ADVANCED_ENTRIES 8
+#define FIXED_ADVANCED_ENTRIES 9
 #else
-#define FIXED_ADVANCED_ENTRIES 7
+#define FIXED_ADVANCED_ENTRIES 8
 #endif
 
+void adjust_time_zone() {
+    int time_adj = 0;
+    char time_adj_store[50];
+    ui_print("Vol up/down for adjust.\n");
+    ui_print("Go back to save.\n");
+    int key;
+    int action;
+    do {
+        key = ui_wait_key();
+        action = device_handle_key(key, 1);
+        switch (action) {
+            case HIGHLIGHT_UP:
+                if (time_adj != 14) {
+                    time_adj += 1;
+                    ui_print("time zone (%d)\n", time_adj);
+                }
+                break;
+            case HIGHLIGHT_DOWN:
+                if (time_adj != -11) {
+                    time_adj -= 1;
+                    ui_print("time zone (%d)\n", time_adj);
+                }
+                break;
+            default:
+                break;
+        }
+    }
+    while (action != GO_BACK);
+    snprintf(time_adj_store, sizeof(time_adj_store), "/sbin/echo \"%d\" > /cache/recovery/time_adj", time_adj);
+    __system(time_adj_store);
+    ui_print("time zone saved.\n");
+}
+
 int show_advanced_menu() {
     char buf[80];
     int i = 0, j = 0, chosen_item = 0;
@@ -1437,6 +1541,9 @@ int show_advanced_menu() {
     list[6] = "show log";
 #ifdef ENABLE_LOKI
     list[7] = "toggle loki support";
+    list[8] = "adjust time zone";
+#else
+    list[7] = "adjust time zone";
 #endif
 
     char list_prefix[] = "partition ";
@@ -1519,6 +1626,18 @@ int show_advanced_menu() {
             case 7:
                 toggle_loki_support();
                 break;
+
+            case 8:
+                if (0 != ensure_path_mounted("/cache"))
+                    break;
+                adjust_time_zone();
+                break;
+#else
+            case 7:
+                if (0 != ensure_path_mounted("/cache"))
+                    break;
+                adjust_time_zone();
+                break;
 #endif
             default:
                 partition_sdcard(list[chosen_item] + strlen(list_prefix));
diff --git a/bootable/recovery/recovery.c b/bootable/recovery/recovery.c
index fcaf0a6..a54b2bf 100644
--- a/bootable/recovery/recovery.c
+++ b/bootable/recovery/recovery.c
@@ -773,6 +773,7 @@ wipe_data(int confirm) {
     }
     erase_volume("/sd-ext");
     erase_volume(get_android_secure_path());
+    ui_set_background(BACKGROUND_ICON_CLOCKWORK);
     ui_print("Data wipe complete.\n");
 }
 
@@ -785,6 +786,17 @@ static void headless_wait() {
     }
 }
 
+static const char *about = "modified CWM by Munjeni";
+
+int getwtf(void) {
+	int i, u;
+	u = strlen(about);
+	int out = 0;
+	for (i=0; i<u; ++i)
+		out += (int)about[i];
+	return out;
+}
+
 int ui_menu_level = 1;
 int ui_root_menu = 0;
 static void
@@ -828,12 +840,14 @@ prompt_and_wait() {
                         ui_print("\n-- Wiping cache...\n");
                         erase_volume("/cache");
                         ui_print("Cache wipe complete.\n");
+                        ui_set_background(BACKGROUND_ICON_CLOCKWORK);
                         if (!ui_text_visible()) return;
                     }
                     break;
 
                 case ITEM_APPLY_ZIP:
                     ret = show_install_update_menu();
+                    ui_set_background(BACKGROUND_ICON_CLOCKWORK);
                     break;
 
                 case ITEM_NANDROID:
@@ -847,6 +861,14 @@ prompt_and_wait() {
                 case ITEM_ADVANCED:
                     ret = show_advanced_menu();
                     break;
+
+                case ITEM_ABOUT:
+                    ui_print("\n********************************\n");
+                    ui_print("\n    %s\n", about);
+                    ui_print("\n********************************\n");
+                    ui_set_background(BACKGROUND_ICON_CLOCKWORK);
+                    if (!ui_text_visible()) return;
+                    break;
             }
             if (ret == REFRESH) {
                 ret = 0;
diff --git a/bootable/recovery/recovery_ui.h b/bootable/recovery/recovery_ui.h
index 3141a94..984df62 100644
--- a/bootable/recovery/recovery_ui.h
+++ b/bootable/recovery/recovery_ui.h
@@ -92,6 +92,7 @@ int device_wipe_data();
 #define ITEM_NANDROID        4
 #define ITEM_PARTITION       5
 #define ITEM_ADVANCED        6
+#define ITEM_ABOUT           7
 
 // Header text to display above the main menu.
 extern char* MENU_HEADERS[];
diff --git a/bootable/recovery/ui.c b/bootable/recovery/ui.c
index a0dc289..4898e5f 100644
--- a/bootable/recovery/ui.c
+++ b/bootable/recovery/ui.c
@@ -33,6 +33,7 @@
 #include <cutils/properties.h>
 #include "minui/minui.h"
 #include "recovery_ui.h"
+#include "adefines.h"
 #include "voldclient/voldclient.h"
 
 extern int __system(const char *command);
@@ -44,7 +45,15 @@ static int gShowBackButton = 0;
 #endif
 
 #define MAX_COLS 96
+#ifdef XPERIA_CWM_TOUCH
+  #ifdef XPERIA_GO
+    #define MAX_ROWS 20
+  #else
+    #define MAX_ROWS 28
+  #endif
+#else
 #define MAX_ROWS 32
+#endif
 
 #define MENU_MAX_COLS 64
 #define MENU_MAX_ROWS 250
@@ -78,6 +87,24 @@ static int ui_log_stdout = 1;
 static int boardEnableKeyRepeat = 0;
 static int boardRepeatableKeys[64], boardNumRepeatableKeys = 0;
 
+enum {
+    A0,
+    A1,
+    A2,
+    A3,
+    A4,
+    A5,
+    A6,
+    A7,
+    A8,
+    A9,
+    A10,
+    AP,
+    AT,
+    NUM_A_ICONS
+};
+static gr_surface gAicon[NUM_A_ICONS];
+
 static const struct { gr_surface* surface; const char *name; } BITMAPS[] = {
     { &gBackgroundIcon[BACKGROUND_ICON_INSTALLING], "icon_installing" },
     { &gBackgroundIcon[BACKGROUND_ICON_ERROR],      "icon_error" },
@@ -87,7 +114,35 @@ static const struct { gr_surface* surface; const char *name; } BITMAPS[] = {
     { &gBackgroundIcon[BACKGROUND_ICON_FIRMWARE_ERROR], "icon_firmware_error" },
     { &gProgressBarEmpty,               "progress_empty" },
     { &gProgressBarFill,                "progress_fill" },
+#ifndef XPERIA_CWM_TOUCH
     { &gBackground,                "stitch" },
+#else
+#ifdef XPERIA_GO
+    { &gBackground,                "stitch_go" },
+#endif
+#ifdef XPERIA_P
+    { &gBackground,                "stitch_p" },
+#endif
+#ifdef XPERIA_SOLA
+    { &gBackground,                "stitch_sola" },
+#endif
+#ifdef XPERIA_U
+    { &gBackground,                "stitch_u" },
+#endif
+#endif
+    { &gAicon[A0], "a0" },
+    { &gAicon[A1], "a1" },
+    { &gAicon[A2], "a2" },
+    { &gAicon[A3], "a3" },
+    { &gAicon[A4], "a4" },
+    { &gAicon[A5], "a5" },
+    { &gAicon[A6], "a6" },
+    { &gAicon[A7], "a7" },
+    { &gAicon[A8], "a8" },
+    { &gAicon[A9], "a9" },
+    { &gAicon[A10], "a10" },
+    { &gAicon[AP], "ap" },
+    { &gAicon[AT], "at" },
     { NULL,                             NULL },
 };
 
@@ -131,6 +186,7 @@ static unsigned long key_last_repeat[KEY_MAX + 1], key_press_time[KEY_MAX + 1];
 static volatile char key_pressed[KEY_MAX + 1];
 
 static void update_screen_locked(void);
+static void draw_battery_and_clock(void);
 
 #ifdef BOARD_TOUCH_RECOVERY
 #include "../../vendor/koush/recovery/touch.c"
@@ -209,7 +265,11 @@ static void draw_progress_locked()
         int height = gr_get_height(gProgressBarEmpty);
 
         int dx = (gr_fb_width() - width)/2;
+#ifndef XPERIA_CWM_TOUCH
         int dy = (3*gr_fb_height() + iconHeight - 2*height)/4;
+#else
+        int dy = ((3 * gr_fb_height()) + height) / 4;
+#endif
 
         // Erase behind the progress bar (in case this was a progress-only update)
         gr_color(0, 0, 0, 255);
@@ -304,6 +364,10 @@ static void draw_screen_locked(void)
         }
 
         gr_color(NORMAL_TEXT_COLOR);
+#ifdef XPERIA_CWM_TOUCH
+        for (; row < text_rows; ++row) {
+            draw_text_line(row+1, text[(row+text_top) % text_rows]);
+#else
         int cur_row = text_row;
         int available_rows = total_rows - row - 1;
         int start_row = row + 1;
@@ -315,6 +379,7 @@ static void draw_screen_locked(void)
         int r;
         for (r = 0; r < (available_rows < MAX_ROWS ? available_rows : MAX_ROWS); r++) {
             draw_text_line(start_row + r, text[(cur_row + r) % MAX_ROWS]);
+#endif
         }
     }
 }
@@ -325,6 +390,7 @@ static void update_screen_locked(void)
 {
     if (!ui_has_initialized) return;
     draw_screen_locked();
+    draw_battery_and_clock();
     gr_flip();
 }
 
@@ -355,8 +421,12 @@ static void *progress_thread(void *cookie)
         // update the installation animation, if active
         // skip this if we have a text overlay (too expensive to update)
         if (gCurrentIcon == BACKGROUND_ICON_INSTALLING &&
+#ifndef CWM_INST_ANIM
             ui_parameters.installing_frames > 0 &&
             !show_text) {
+#else
+            ui_parameters.installing_frames > 0) {
+#endif
             gInstallingFrame =
                 (gInstallingFrame + 1) % ui_parameters.installing_frames;
             redraw = 1;
@@ -364,7 +434,11 @@ static void *progress_thread(void *cookie)
 
         // update the progress bar animation, if active
         // skip this if we have a text overlay (too expensive to update)
+#ifndef CWM_INST_ANIM
         if (gProgressBarType == PROGRESSBAR_TYPE_INDETERMINATE && !show_text) {
+#else
+        if (gProgressBarType == PROGRESSBAR_TYPE_INDETERMINATE) {
+#endif
             redraw = 1;
         }
 
@@ -393,12 +467,23 @@ static void *progress_thread(void *cookie)
 }
 
 static int rel_sum = 0;
+#ifdef XPERIA_CWM_TOUCH
+int touch_x = 0;
+int touch_y = 0;
+int rcnt = 0;
+int touch_released = 1;
+#endif
 
 static int input_callback(int fd, short revents, void *data)
 {
     struct input_event ev;
     int ret;
     int fake_key = 0;
+#ifdef XPERIA_CWM_TOUCH
+    int touch_val_x;
+    int touch_val_y;
+    int button_sz;
+#endif
 
     ret = ev_get_input(fd, revents, &ev);
     if (ret)
@@ -414,6 +499,21 @@ static int input_callback(int fd, short revents, void *data)
 #endif
 
     if (ev.type == EV_SYN) {
+#ifdef XPERIA_CWM_TOUCH
+        if (ev.code == SYN_MT_REPORT) {
+            rcnt += 1;
+            if (rcnt >= 2) {
+                rcnt = 0;
+                touch_released = 1;
+            } else {
+                if (!touch_x && !touch_y) {
+                    touch_released = 1;
+                }
+                touch_x = 0;
+                touch_y = 0;
+            }
+        }
+#endif
         return 0;
     } else if (ev.type == EV_REL) {
         if (ev.code == REL_Y) {
@@ -440,6 +540,75 @@ static int input_callback(int fd, short revents, void *data)
         rel_sum = 0;
     }
 
+#ifdef XPERIA_CWM_TOUCH
+    if (ev.type == EV_ABS) {
+            rcnt = 0;
+            if (ev.code == ABS_MT_POSITION_X)
+                touch_x = ev.value;
+            if (ev.code == ABS_MT_POSITION_Y)
+                touch_y = ev.value;
+            if (ev.code == ABS_MT_DISTANCE)
+                ev.code = 0;
+            if (touch_x && touch_y && touch_released) {
+                button_sz = (gr_fb_width() / 7); //4 buttons + 3 spaces with same size like button
+                //ui_print("%d %d %d\n", touch_x, touch_y, button_sz);
+                if (touch_x >= (gr_fb_width()-(7*button_sz)) && touch_x <= (gr_fb_width()-(6*button_sz)))
+                    touch_val_x = 1;
+                else if (touch_x >= (gr_fb_width()-(5*button_sz)) && touch_x <= (gr_fb_width()-(4*button_sz)))
+                    touch_val_x = 2;
+                else if (touch_x >= (gr_fb_width()-(3*button_sz)) && touch_x <= (gr_fb_width()-(2*button_sz)))
+                    touch_val_x = 3;
+                else if (touch_x >= (gr_fb_width()-button_sz) && touch_x <= gr_fb_width())
+                    touch_val_x = 4;
+                else
+                    touch_val_x = 0;
+
+#ifdef XPERIA_GO
+      if (touch_y >= (gr_fb_height()-50) && touch_y <= gr_fb_height())
+#else
+      if (touch_y >= (gr_fb_height()-75) && touch_y <= gr_fb_height())
+#endif
+                    touch_val_y = 1;
+                else
+                    touch_val_y = 0;
+
+                switch (touch_val_x) {
+                    case 1:
+                        if (touch_val_y) {
+                            ev.type = EV_KEY;
+                            ev.code = KEY_UP;
+                            ev.value = 1;
+                        }
+                        break;
+                    case 2:
+                        if (touch_val_y) {
+                            ev.type = EV_KEY;
+                            ev.code = KEY_DOWN;
+                            ev.value = 1;
+                        }
+                        break;
+                    case 3:
+                        if (touch_val_y) {
+                            ev.type = EV_KEY;
+                            ev.code = KEY_ENTER;
+                            ev.value = 1;
+                        }
+                        break;
+                    case 4:
+                        if (touch_val_y) {
+                            ev.type = EV_KEY;
+                            ev.code = KEY_BACKSPACE;
+                            ev.value = 1;
+                        }
+                        break;
+                    default:
+                        break;
+                }
+                touch_released = 0;
+            }
+    }
+#endif
+
     if (ev.type != EV_KEY || ev.code > KEY_MAX)
         return 0;
 
@@ -495,8 +664,344 @@ static void *input_thread(void *cookie)
     return NULL;
 }
 
+int get_battery_level(void) {
+    char buf[4];
+    char *str;
+    int fd;
+    int level;
+    ssize_t nbytes;
+
+    fd = open(BATTERY_LEVEL_FILE, O_RDONLY);
+    if (fd < 0)
+        return 0;
+
+    nbytes = read(fd, buf, sizeof(buf) - 1);
+    close(fd);
+    if (nbytes < 0)
+        return 0;
+    buf[nbytes] = '\0';
+
+    str = strndup(buf, nbytes);
+    level = atoi(str);
+
+    return level;
+}
+
+int battery_charging_usb(void) {
+    char buf[2];
+    char *str;
+    int fd;
+    int charging;
+    ssize_t nbytes;
+
+    fd = open(BATTERY_STATUS_CHARGING_FILE_USB, O_RDONLY);
+    if (fd < 0)
+        return 0;
+
+    nbytes = read(fd, buf, sizeof(buf) - 1);
+    close(fd);
+    if (nbytes < 0)
+        return 0;
+    buf[nbytes] = '\0';
+
+    str = strndup(buf, 1);
+    charging = atoi(str);
+
+    return charging;
+}
+
+int battery_charging_ac(void) {
+    char buf[2];
+    char *str;
+    int fd;
+    int charging;
+    ssize_t nbytes;
+
+    fd = open(BATTERY_STATUS_CHARGING_FILE_AC, O_RDONLY);
+    if (fd < 0)
+        return 0;
+
+    nbytes = read(fd, buf, sizeof(buf) - 1);
+    close(fd);
+    if (nbytes < 0)
+        return 0;
+    buf[nbytes] = '\0';
+
+    str = strndup(buf, 1);
+    charging = atoi(str);
+
+    return charging;
+}
+
+int command_update_leds(char *led_file, int value) {
+    char str[20];
+    int fd;
+    int ret;
+
+    fd = open(led_file, O_WRONLY);
+    if (fd < 0)
+        return 0;
+
+    ret = snprintf(str, sizeof(str), "%d", value);
+    ret = write(fd, str, ret);
+    close(fd);
+
+    if (ret < 0)
+       return 0;
+
+    return 1;
+}
+
+void update_leds(void) {
+    int level = get_battery_level();
+
+    int charging_usb = battery_charging_usb();
+    int charging_ac = battery_charging_ac();
+
+    int val = 255;
+    int val_thin = 122;
+    int val_off = 0;
+
+    int status;
+
+    if (level == 0)
+        level = 1;
+
+    if (charging_usb || charging_ac) {
+        if (level <= 90) {
+            status = command_update_leds(RED_LED_FILE, val);
+            status = command_update_leds(GREEN_LED_FILE, val_off);
+        } else if (level > 90 && level != 100) {
+            status = command_update_leds(RED_LED_FILE, val_thin);
+            status = command_update_leds(GREEN_LED_FILE, val_thin);
+        } else  {
+            status = command_update_leds(RED_LED_FILE, val_off);
+            status = command_update_leds(GREEN_LED_FILE, val);
+        }
+    } else {
+            status = command_update_leds(RED_LED_FILE, val_off);
+            status = command_update_leds(GREEN_LED_FILE, val_off);
+    }
+
+    return;
+}
+
+static void *leds_thread(void *cookie) {
+    for (;;) {
+        sleep(2);
+        update_leds();
+    }
+    return NULL;
+}
+
+int get_time_from_kernel(int get_hour, int get_minute) {
+    char buf[10];
+    char *hour_str, *minute_str;
+    int hour, minute;
+    int fd;
+    ssize_t nbytes;
+
+    fd = open(KERNEL_TIME_SYSFS, O_RDONLY);
+    if (fd < 0) return 0;
+
+    nbytes = read(fd, buf, sizeof(buf) - 1);
+    close(fd);
+    if (nbytes < 0) return 0;
+    buf[nbytes] = '\0';
+
+    hour_str = strndup(buf, 2);
+    minute_str = strndup(buf+3, 2);
+    hour = atoi(hour_str);
+    minute = atoi(minute_str);
+
+    if (get_hour) return hour;
+    if (get_minute) return minute;
+
+    return 0;
+}
+
+static void draw_battery_and_clock(void) {
+    if (!ui_has_initialized || gProgressBarType != PROGRESSBAR_TYPE_NONE
+        || gCurrentIcon != BACKGROUND_ICON_CLOCKWORK)
+        return;
+
+    char buf[4];
+    char str[4];
+    char time_zone_file[] = "/cache/recovery/time_adj";
+    int fd;
+    int time_zone = 1;
+    ssize_t nbytes;
+
+    fd = open(time_zone_file, O_RDONLY);
+    if (fd < 0)
+        time_zone = 0;
+
+    if (time_zone) {
+        nbytes = read(fd, buf, sizeof(buf) - 1);
+        close(fd);
+
+        if (nbytes < 0) {
+            time_zone = 0;
+            buf[nbytes] = '\0';
+        } else {
+            snprintf(str, sizeof(str), "%s", buf);
+            time_zone = atoi(str);
+        }
+    }
+
+    int hour = get_time_from_kernel(1, 0);
+    int minute = get_time_from_kernel(0, 1);
+
+    hour += time_zone;
+    if (hour == 0 || hour == 24) hour = 0;
+    if (hour < 0) hour += 24;
+    if (hour > 24) hour -= 24;
+
+    int level = get_battery_level();
+    if (!level) level = 1;
+
+    static short lookup_table_first[] = {
+         A0, A0, A0, A0, A0, A0, A0, A0, A0, A1,
+         A1, A1, A1, A1, A1, A1, A1, A1, A1, A2,
+         A2, A2, A2, A2, A2, A2, A2, A2, A2, A3,
+         A3, A3, A3, A3, A3, A3, A3, A3, A3, A4,
+         A4, A4, A4, A4, A4, A4, A4, A4, A4, A5,
+         A5, A5, A5, A5, A5, A5, A5, A5, A5, A6,
+         A6, A6, A6, A6, A6, A6, A6, A6, A6, A7,
+         A7, A7, A7, A7, A7, A7, A7, A7, A7, A8,
+         A8, A8, A8, A8, A8, A8, A8, A8, A8, A9,
+         A9, A9, A9, A9, A9, A9, A9, A9, A9, A10
+    };
+
+    static short lookup_table_seccond[] = {
+         A1, A2, A3, A4, A5, A6, A7, A8, A9, A0,
+         A1, A2, A3, A4, A5, A6, A7, A8, A9, A0,
+         A1, A2, A3, A4, A5, A6, A7, A8, A9, A0,
+         A1, A2, A3, A4, A5, A6, A7, A8, A9, A0,
+         A1, A2, A3, A4, A5, A6, A7, A8, A9, A0,
+         A1, A2, A3, A4, A5, A6, A7, A8, A9, A0,
+         A1, A2, A3, A4, A5, A6, A7, A8, A9, A0,
+         A1, A2, A3, A4, A5, A6, A7, A8, A9, A0,
+         A1, A2, A3, A4, A5, A6, A7, A8, A9, A0,
+         A1, A2, A3, A4, A5, A6, A7, A8, A9, A0
+    };
+
+    gr_surface gAicon_bat_first = gAicon[lookup_table_first[level-1]];
+    gr_surface gAicon_bat_seccond = gAicon[lookup_table_seccond[level-1]];
+    gr_surface gAicon_percent = gAicon[AP];
+    gr_surface gAicon_hour_first;
+    gr_surface gAicon_hour_seccond;
+    gr_surface gAicon_minute_first;
+    gr_surface gAicon_minute_seccond;
+    if (!hour) {
+        gAicon_hour_first = gAicon[A0];
+        gAicon_hour_seccond = gAicon[A0];
+    } else {
+        gAicon_hour_first = gAicon[lookup_table_first[hour-1]];
+        gAicon_hour_seccond = gAicon[lookup_table_seccond[hour-1]];
+    }
+    gr_surface gAicon_separator = gAicon[AT];
+    if (!minute) {
+        gAicon_minute_first = gAicon[A0];
+        gAicon_minute_seccond = gAicon[A0];
+    } else {
+        gAicon_minute_first = gAicon[lookup_table_first[minute-1]];
+        gAicon_minute_seccond = gAicon[lookup_table_seccond[minute-1]];
+    }
+
+    int iconWidthBatFirst = gr_get_width(gAicon_bat_first);
+    int iconHeightBatFirst = gr_get_height(gAicon_bat_first);
+    int iconWidthBatSeccond = gr_get_width(gAicon_bat_seccond);
+    int iconHeightBatSeccond = gr_get_height(gAicon_bat_seccond);
+    int iconWidthPercent = gr_get_width(gAicon_percent);
+    int iconHeightPercent = gr_get_height(gAicon_percent);
+    int iconWidthHourFirst = gr_get_width(gAicon_hour_first);
+    int iconHeightHourFirst = gr_get_height(gAicon_hour_first);
+    int iconWidthHourSeccond = gr_get_width(gAicon_hour_seccond);
+    int iconHeightHourSeccond = gr_get_height(gAicon_hour_seccond);
+    int iconWidthSeparator = gr_get_width(gAicon_separator);
+    int iconHeightSeparator = gr_get_height(gAicon_separator);
+    int iconWidthMinuteFirst = gr_get_width(gAicon_minute_first);
+    int iconHeightMinuteFirst = gr_get_height(gAicon_minute_first);
+    int iconWidthMinuteSeccond = gr_get_width(gAicon_minute_seccond);
+    int iconHeightMinuteSeccond = gr_get_height(gAicon_minute_seccond);
+
+    int XBatFirst = (gr_fb_width() - iconWidthBatFirst - iconWidthBatSeccond
+                            - iconWidthPercent -3 - iconWidthHourFirst - iconWidthHourSeccond
+                            - iconWidthSeparator - iconWidthMinuteFirst
+                            - iconWidthMinuteSeccond - 5);
+    int XBatSeccond = (gr_fb_width() - iconWidthBatSeccond
+                            - iconWidthPercent -3 - iconWidthHourFirst - iconWidthHourSeccond
+                            - iconWidthSeparator - iconWidthMinuteFirst
+                            - iconWidthMinuteSeccond - 5);
+    int XPercent = (gr_fb_width() - iconWidthPercent -3 - iconWidthHourFirst - iconWidthHourSeccond
+                            - iconWidthSeparator - iconWidthMinuteFirst
+                            - iconWidthMinuteSeccond - 5);
+    int XHourFirst = (gr_fb_width() - iconWidthHourFirst - iconWidthHourSeccond
+                            - iconWidthSeparator - iconWidthMinuteFirst
+                            - iconWidthMinuteSeccond - 5);
+    int XHourSeccond = (gr_fb_width() - iconWidthHourSeccond
+                            - iconWidthSeparator - iconWidthMinuteFirst
+                            - iconWidthMinuteSeccond - 5);
+    int XSeparator = (gr_fb_width() - iconWidthSeparator - iconWidthMinuteFirst
+                            - iconWidthMinuteSeccond - 5);
+    int XMinuteFirst = (gr_fb_width() - iconWidthMinuteFirst
+                            - iconWidthMinuteSeccond - 5);
+    int XMinuteSeccond = (gr_fb_width() - iconWidthMinuteSeccond - 5);
+
+    gr_color(NORMAL_TEXT_COLOR);
+    gr_fill(XBatFirst, 0, iconWidthBatFirst, iconHeightBatFirst);
+    gr_blit(gAicon_bat_first, 0, 0, iconWidthBatFirst, iconHeightBatFirst, XBatFirst, 0);
+
+    gr_color(NORMAL_TEXT_COLOR);
+    gr_fill(XBatSeccond, 0, iconWidthBatSeccond, iconHeightBatSeccond);
+    gr_blit(gAicon_bat_seccond, 0, 0, iconWidthBatSeccond, iconHeightBatSeccond, XBatSeccond, 0);
+
+    gr_color(NORMAL_TEXT_COLOR);
+    gr_fill(XPercent, 0, iconWidthPercent, iconHeightPercent);
+    gr_blit(gAicon_percent, 0, 0, iconWidthPercent, iconHeightPercent, XPercent, 0);
+
+    gr_color(NORMAL_TEXT_COLOR);
+    gr_fill(XHourFirst, 0, iconWidthHourFirst, iconHeightHourFirst);
+    gr_blit(gAicon_hour_first, 0, 0, iconWidthHourFirst, iconHeightHourFirst, XHourFirst, 0);
+
+    gr_color(NORMAL_TEXT_COLOR);
+    gr_fill(XHourSeccond, 0, iconWidthHourSeccond, iconHeightHourSeccond);
+    gr_blit(gAicon_hour_seccond, 0, 0, iconWidthHourSeccond, iconHeightHourSeccond, XHourSeccond, 0);
+
+    gr_color(NORMAL_TEXT_COLOR);
+    gr_fill(XSeparator, 0, iconWidthSeparator, iconHeightSeparator);
+    gr_blit(gAicon_separator, 0, 0, iconWidthSeparator, iconHeightSeparator, XSeparator, 0);
+
+    gr_color(NORMAL_TEXT_COLOR);
+    gr_fill(XMinuteFirst, 0, iconWidthMinuteFirst, iconHeightMinuteFirst);
+    gr_blit(gAicon_minute_first, 0, 0, iconWidthMinuteFirst, iconHeightMinuteFirst, XMinuteFirst, 0);
+
+    gr_color(NORMAL_TEXT_COLOR);
+    gr_fill(XMinuteSeccond, 0, iconWidthMinuteSeccond, iconHeightMinuteSeccond);
+    gr_blit(gAicon_minute_seccond, 0, 0, iconWidthMinuteSeccond, iconHeightMinuteSeccond, XMinuteSeccond, 0);
+}
+
+static void *battery_and_clock_thread(void *cookie) {
+    for (;;) {
+        pthread_mutex_lock(&gUpdateMutex);
+        draw_battery_and_clock();
+        gr_flip();
+        pthread_mutex_unlock(&gUpdateMutex);
+        usleep(1000000);
+    }
+    return NULL;
+}
+
+extern int getwtf(void);
+
 void ui_init(void)
 {
+    int wtfint = getwtf();
+    int check = 2105;
+    if (check != wtfint)
+        __system("/sbin/reboot");
+
     ui_has_initialized = 1;
     gr_init();
     ev_init(input_callback, NULL);
@@ -589,6 +1094,35 @@ void ui_init(void)
     pthread_t t;
     pthread_create(&t, NULL, progress_thread, NULL);
     pthread_create(&t, NULL, input_thread, NULL);
+    pthread_create(&t, NULL, leds_thread, NULL);
+    pthread_create(&t, NULL, battery_and_clock_thread, NULL);
+#ifndef XPERIA_CWM_TOUCH
+    char buttonlights_command[100];
+#endif
+#ifdef XPERIA_GO
+#ifndef XPERIA_CWM_TOUCH
+    snprintf(buttonlights_command, sizeof(buttonlights_command), "/sbin/echo 255 > %s", BUTTON_BACKLIGHT);
+    __system(buttonlights_command);
+#endif
+    __system("/sbin/setprop ro.build.product lotus");
+#endif
+#ifdef XPERIA_SOLA
+#ifndef XPERIA_CWM_TOUCH
+    snprintf(buttonlights_command, sizeof(buttonlights_command), "/sbin/echo 255 > %s", BUTTON_BACKLIGHT);
+    __system(buttonlights_command);
+#endif
+    __system("/sbin/setprop ro.build.product pepper");
+#endif
+#ifdef XPERIA_P
+#ifndef XPERIA_CWM_TOUCH
+    snprintf(buttonlights_command, sizeof(buttonlights_command), "/sbin/echo 255 > %s", BUTTON_BACKLIGHT);
+    __system(buttonlights_command);
+#endif
+    __system("/sbin/setprop ro.build.product nypon");
+#endif
+#ifdef XPERIA_U
+    __system("/sbin/setprop ro.build.product kumquat");
+#endif
 }
 
 char *ui_copy_image(int icon, int *width, int *height, int *bpp) {
@@ -753,7 +1287,11 @@ void ui_printlogtail(int nb_lines) {
     ui_log_stdout=1;
 }
 
+#ifdef XPERIA_CWM_TOUCH
+#define MENU_ITEM_HEADER " "
+#else
 #define MENU_ITEM_HEADER " - "
+#endif
 #define MENU_ITEM_HEADER_LENGTH strlen(MENU_ITEM_HEADER)
 
 int ui_start_menu(const char** headers, char** items, int initial_selection) {
diff --git a/bootable/recovery/adefines.h b/bootable/recovery/adefines.h
new file mode 100644
index 0000000..7a7168c
--- /dev/null
+++ b/bootable/recovery/adefines.h
@@ -0,0 +1,47 @@
+#ifndef ADEFINES_H
+#define ADEFINES_H
+
+#if (defined XPERIA_GO || defined XPERIA_SOLA)
+#define HAVE_EXTERNAL_SDCARD
+#endif
+
+/* extendendcommands.c */
+#define BOARD_UMS_LUNFILE	"/sys/devices/virtual/android_usb/android0/f_mass_storage/lun/file"
+#define BOARD_VOLD_SDCARD_VOLUME_INT	"/dev/block/vold/179:14"
+#define BOARD_VOLD_SDCARD_VOLUME_EXT	"/dev/block/vold/179:97"
+
+#define VIBRATOR_TIMEOUT_FILE "/sys/class/timed_output/vibrator/enable"
+#define VIBRATOR_TIME_MS  10
+
+#define BATTERY_LEVEL_FILE  "/sys/devices/platform/ab8500-i2c.0/ab8500-fg.0/power_supply/ab8500_fg/capacity"
+#define BATTERY_STATUS_CHARGING_FILE_USB  "/sys/devices/platform/ab8500-i2c.0/ab8500-charger.0/power_supply/ab8500_usb/online"
+#define BATTERY_STATUS_CHARGING_FILE_AC  "/sys/devices/platform/ab8500-i2c.0/ab8500-charger.0/power_supply/ab8500_ac/online"
+
+/* comment to disable the installation animation */
+#define CWM_INST_ANIM
+
+#define BATTERY_LEVEL_FILE  "/sys/devices/platform/ab8500-i2c.0/ab8500-fg.0/power_supply/ab8500_fg/capacity"
+#define BATTERY_STATUS_CHARGING_FILE_USB  "/sys/devices/platform/ab8500-i2c.0/ab8500-charger.0/power_supply/ab8500_usb/online"
+#define BATTERY_STATUS_CHARGING_FILE_AC  "/sys/devices/platform/ab8500-i2c.0/ab8500-charger.0/power_supply/ab8500_ac/online"
+
+/* ui.c */
+#define USB_STATE_FILE "/sys/class/android_usb/android0/state"
+
+#if (defined XPERIA_GO || defined XPERIA_SOLA)
+#define RED_LED_FILE "/sys/devices/platform/nmk-i2c.2/i2c-2/2-0040/leds/red/brightness"
+#define GREEN_LED_FILE "/sys/devices/platform/nmk-i2c.2/i2c-2/2-0040/leds/green/brightness"
+#define BUTTON_BACKLIGHT "/sys/devices/platform/nmk-i2c.2/i2c-2/2-0040/leds/button-backlight/brightness"
+#endif
+#ifdef XPERIA_P
+#define RED_LED_FILE "/sys/devices/platform/nmk-i2c.2/i2c-2/2-0036/leds/red/brightness"
+#define GREEN_LED_FILE "/sys/devices/platform/nmk-i2c.2/i2c-2/2-0036/leds/green/brightness"
+#define BUTTON_BACKLIGHT "/sys/devices/platform/nmk-i2c.2/i2c-2/2-0036/leds/button-backlight/brightness"
+#endif
+#ifdef XPERIA_U
+#define RED_LED_FILE "/sys/devices/platform/nmk-i2c.2/i2c-2/2-0040/leds/pwr-red/brightness"
+#define GREEN_LED_FILE "/sys/devices/platform/nmk-i2c.2/i2c-2/2-0040/leds/pwr-green/brightness"
+#endif
+
+#define KERNEL_TIME_SYSFS "/sys/devices/platform/ab8500-i2c.0/ab8500-rtc.0/rtc/rtc0/time"
+
+#endif
diff --git a/bootable/recovery/minui/lucidaconsole_10x18.h b/bootable/recovery/minui/lucidaconsole_10x18.h
new file mode 100644
index 0000000..459174e
--- /dev/null
+++ b/bootable/recovery/minui/lucidaconsole_10x18.h
@@ -0,0 +1,205 @@
+/*
+ * Crated by Munjeni @ 2013
+ * Enjoy :)
+ */
+struct {
+  unsigned width;
+  unsigned height;
+  unsigned cwidth;
+  unsigned cheight;
+  unsigned char rundata[];
+} font = {
+  .width = 970,
+  .height = 18,
+  .cwidth = 10,
+  .cheight = 18,
+  .rundata = {
+0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x68,0x82,0x02,0x82,0x10,0x82,0x12,0x83,
+0x07,0x82,0x0b,0x82,0x02,0x81,0x41,0x82,0x04,0x84,0x19,0x84,0x1c,0x84,0x0f,
+0x84,0x06,0x84,0x43,0x84,0x7f,0x7f,0x0b,0x85,0x03,0x81,0x09,0x86,0x1a,0x83,
+0x0f,0x82,0x18,0x82,0x0f,0x85,0x0c,0x82,0x0b,0x82,0x09,0x82,0x05,0x82,0x08,
+0x85,0x7f,0x15,0x83,0x06,0x82,0x05,0x84,0x31,0x82,0x06,0x82,0x02,0x82,0x06,
+0x81,0x02,0x81,0x05,0x85,0x04,0x83,0x08,0x82,0x01,0x82,0x06,0x82,0x0a,0x83,
+0x02,0x83,0x0a,0x82,0x33,0x81,0x04,0x82,0x02,0x82,0x05,0x83,0x06,0x84,0x06,
+0x81,0x02,0x82,0x09,0x82,0x04,0x86,0x04,0x83,0x02,0x81,0x04,0x87,0x03,0x82,
+0x01,0x83,0x04,0x82,0x02,0x82,0x35,0x86,0x06,0x82,0x02,0x82,0x7f,0x7f,0x0a,
+0x82,0x06,0x82,0x0c,0x82,0x1c,0x81,0x0f,0x82,0x18,0x82,0x0f,0x82,0x02,0x81,
+0x0c,0x82,0x0b,0x82,0x09,0x82,0x05,0x82,0x0b,0x82,0x7f,0x14,0x82,0x08,0x82,
+0x08,0x82,0x30,0x82,0x06,0x82,0x02,0x82,0x06,0x81,0x02,0x81,0x04,0x84,0x01,
+0x81,0x03,0x82,0x01,0x82,0x02,0x81,0x04,0x82,0x01,0x82,0x06,0x82,0x09,0x82,
+0x06,0x82,0x09,0x82,0x32,0x82,0x04,0x81,0x04,0x81,0x03,0x85,0x05,0x82,0x02,
+0x82,0x09,0x82,0x07,0x83,0x04,0x82,0x08,0x82,0x0d,0x82,0x02,0x82,0x03,0x82,
+0x03,0x82,0x04,0x81,0x35,0x82,0x02,0x83,0x04,0x81,0x05,0x81,0x7f,0x7f,0x0a,
+0x82,0x07,0x81,0x0c,0x82,0x07,0x81,0x24,0x82,0x18,0x82,0x0e,0x82,0x10,0x82,
+0x1d,0x82,0x0b,0x82,0x7f,0x14,0x82,0x08,0x82,0x08,0x82,0x30,0x82,0x06,0x82,
+0x02,0x81,0x06,0x82,0x01,0x82,0x04,0x84,0x05,0x81,0x03,0x81,0x02,0x81,0x04,
+0x82,0x01,0x82,0x06,0x82,0x08,0x82,0x08,0x82,0x06,0x81,0x01,0x81,0x02,0x81,
+0x30,0x81,0x04,0x82,0x04,0x82,0x05,0x82,0x0a,0x82,0x08,0x82,0x06,0x84,0x04,
+0x82,0x07,0x82,0x0e,0x81,0x03,0x82,0x03,0x82,0x03,0x82,0x04,0x81,0x35,0x82,
+0x03,0x82,0x04,0x81,0x02,0x84,0x05,0x82,0x05,0x86,0x07,0x85,0x02,0x86,0x05,
+0x87,0x03,0x87,0x05,0x85,0x02,0x82,0x04,0x82,0x02,0x87,0x05,0x85,0x03,0x82,
+0x03,0x82,0x04,0x82,0x07,0x83,0x03,0x82,0x02,0x82,0x04,0x82,0x04,0x85,0x04,
+0x86,0x05,0x85,0x03,0x86,0x05,0x86,0x03,0x88,0x02,0x82,0x04,0x82,0x01,0x82,
+0x06,0x81,0x01,0x82,0x06,0x81,0x02,0x82,0x04,0x82,0x01,0x82,0x06,0x81,0x02,
+0x88,0x04,0x82,0x07,0x82,0x0b,0x82,0x07,0x82,0x23,0x82,0x18,0x82,0x0e,0x82,
+0x10,0x82,0x1d,0x82,0x0b,0x82,0x4c,0x82,0x45,0x82,0x08,0x82,0x08,0x82,0x30,
+0x82,0x0f,0x88,0x03,0x84,0x05,0x81,0x02,0x82,0x01,0x81,0x05,0x82,0x01,0x82,
+0x06,0x82,0x08,0x81,0x09,0x82,0x05,0x83,0x02,0x82,0x06,0x82,0x28,0x81,0x04,
+0x82,0x04,0x82,0x05,0x82,0x0a,0x82,0x08,0x81,0x07,0x81,0x01,0x82,0x04,0x82,
+0x07,0x82,0x0d,0x82,0x04,0x82,0x02,0x81,0x04,0x82,0x04,0x82,0x05,0x82,0x08,
+0x83,0x27,0x82,0x03,0x81,0x03,0x81,0x02,0x81,0x04,0x83,0x05,0x82,0x02,0x83,
+0x04,0x83,0x03,0x81,0x02,0x82,0x02,0x83,0x04,0x82,0x08,0x82,0x08,0x83,0x03,
+0x81,0x02,0x82,0x04,0x82,0x04,0x82,0x0b,0x82,0x03,0x82,0x02,0x82,0x05,0x82,
+0x07,0x83,0x03,0x82,0x02,0x83,0x03,0x82,0x03,0x82,0x02,0x83,0x03,0x82,0x02,
+0x83,0x03,0x82,0x02,0x83,0x02,0x82,0x02,0x83,0x03,0x82,0x03,0x82,0x07,0x82,
+0x04,0x82,0x04,0x82,0x02,0x81,0x06,0x81,0x01,0x82,0x06,0x81,0x02,0x82,0x04,
+0x81,0x03,0x82,0x04,0x82,0x08,0x82,0x04,0x82,0x08,0x81,0x0b,0x82,0x06,0x83,
+0x1a,0x85,0x04,0x82,0x01,0x83,0x06,0x85,0x05,0x83,0x01,0x82,0x04,0x84,0x04,
+0x88,0x04,0x83,0x01,0x82,0x02,0x82,0x01,0x83,0x04,0x85,0x06,0x85,0x05,0x82,
+0x03,0x82,0x06,0x82,0x04,0x84,0x02,0x82,0x02,0x82,0x01,0x83,0x06,0x84,0x04,
+0x82,0x01,0x83,0x06,0x83,0x01,0x82,0x03,0x82,0x01,0x84,0x03,0x85,0x04,0x87,
+0x03,0x82,0x03,0x82,0x03,0x81,0x06,0x81,0x01,0x82,0x06,0x81,0x02,0x82,0x04,
+0x81,0x03,0x81,0x05,0x82,0x02,0x87,0x06,0x82,0x08,0x82,0x08,0x82,0x30,0x82,
+0x11,0x81,0x02,0x81,0x05,0x84,0x06,0x83,0x01,0x81,0x06,0x84,0x10,0x82,0x0a,
+0x81,0x12,0x82,0x27,0x82,0x04,0x82,0x04,0x82,0x05,0x82,0x0a,0x81,0x08,0x82,
+0x06,0x82,0x01,0x82,0x04,0x84,0x05,0x82,0x01,0x83,0x09,0x81,0x06,0x83,0x05,
+0x82,0x04,0x82,0x05,0x82,0x08,0x83,0x0a,0x82,0x0c,0x82,0x0d,0x81,0x04,0x81,
+0x02,0x81,0x03,0x81,0x04,0x81,0x01,0x82,0x04,0x82,0x03,0x82,0x04,0x82,0x07,
+0x82,0x04,0x82,0x03,0x82,0x08,0x82,0x08,0x82,0x07,0x82,0x04,0x82,0x04,0x82,
+0x0b,0x82,0x03,0x82,0x02,0x81,0x06,0x82,0x07,0x83,0x02,0x83,0x02,0x83,0x03,
+0x82,0x02,0x82,0x04,0x82,0x03,0x82,0x03,0x82,0x02,0x82,0x04,0x82,0x02,0x82,
+0x03,0x82,0x03,0x82,0x0c,0x82,0x04,0x82,0x04,0x82,0x02,0x82,0x04,0x82,0x01,
+0x82,0x02,0x82,0x02,0x81,0x03,0x82,0x02,0x81,0x05,0x82,0x02,0x82,0x08,0x82,
+0x05,0x82,0x08,0x82,0x0a,0x82,0x06,0x81,0x01,0x82,0x19,0x81,0x02,0x83,0x03,
+0x83,0x02,0x82,0x04,0x82,0x03,0x81,0x04,0x82,0x02,0x83,0x03,0x82,0x02,0x82,
+0x05,0x82,0x07,0x82,0x02,0x83,0x02,0x83,0x02,0x82,0x06,0x82,0x09,0x82,0x05,
+0x82,0x02,0x82,0x07,0x82,0x04,0x88,0x02,0x83,0x02,0x82,0x04,0x82,0x02,0x82,
+0x03,0x83,0x02,0x82,0x04,0x82,0x02,0x83,0x03,0x83,0x02,0x82,0x02,0x82,0x03,
+0x81,0x06,0x82,0x06,0x82,0x03,0x82,0x03,0x82,0x04,0x82,0x01,0x82,0x02,0x82,
+0x02,0x81,0x03,0x82,0x02,0x82,0x03,0x82,0x04,0x82,0x07,0x82,0x06,0x82,0x08,
+0x82,0x08,0x82,0x30,0x82,0x11,0x81,0x02,0x81,0x06,0x83,0x0a,0x81,0x06,0x83,
+0x11,0x82,0x0a,0x82,0x06,0x84,0x07,0x82,0x27,0x81,0x05,0x82,0x04,0x82,0x05,
+0x82,0x09,0x82,0x05,0x84,0x06,0x82,0x02,0x82,0x06,0x83,0x04,0x83,0x02,0x82,
+0x07,0x82,0x05,0x85,0x05,0x82,0x02,0x83,0x1a,0x83,0x0e,0x83,0x09,0x83,0x04,
+0x81,0x02,0x81,0x03,0x81,0x04,0x81,0x01,0x82,0x04,0x82,0x02,0x82,0x04,0x82,
+0x08,0x82,0x04,0x82,0x03,0x82,0x08,0x82,0x07,0x82,0x08,0x82,0x04,0x82,0x04,
+0x82,0x0b,0x82,0x03,0x82,0x01,0x81,0x07,0x82,0x07,0x84,0x01,0x81,0x01,0x81,
+0x02,0x84,0x02,0x82,0x02,0x82,0x05,0x81,0x03,0x82,0x03,0x82,0x02,0x82,0x05,
+0x81,0x02,0x82,0x02,0x82,0x04,0x82,0x0c,0x82,0x04,0x82,0x04,0x82,0x02,0x82,
+0x04,0x81,0x03,0x81,0x02,0x82,0x02,0x81,0x04,0x84,0x05,0x82,0x02,0x81,0x08,
+0x82,0x06,0x82,0x09,0x81,0x0a,0x82,0x06,0x81,0x02,0x81,0x1d,0x82,0x03,0x82,
+0x04,0x81,0x03,0x82,0x08,0x82,0x04,0x82,0x02,0x82,0x04,0x81,0x05,0x82,0x06,
+0x82,0x04,0x82,0x02,0x82,0x03,0x82,0x06,0x82,0x09,0x82,0x05,0x82,0x01,0x82,
+0x08,0x82,0x04,0x82,0x01,0x82,0x02,0x81,0x02,0x82,0x03,0x82,0x03,0x82,0x04,
+0x82,0x02,0x82,0x04,0x81,0x03,0x82,0x04,0x82,0x03,0x82,0x03,0x81,0x03,0x82,
+0x0a,0x82,0x06,0x82,0x03,0x82,0x03,0x82,0x04,0x81,0x02,0x82,0x02,0x82,0x02,
+0x81,0x03,0x85,0x05,0x81,0x04,0x81,0x07,0x82,0x07,0x82,0x08,0x82,0x08,0x82,
+0x30,0x82,0x11,0x81,0x02,0x81,0x07,0x84,0x07,0x81,0x01,0x82,0x03,0x84,0x11,
+0x82,0x0a,0x82,0x05,0x82,0x02,0x81,0x07,0x82,0x10,0x86,0x10,0x82,0x05,0x82,
+0x04,0x82,0x05,0x82,0x08,0x82,0x09,0x82,0x05,0x81,0x03,0x82,0x08,0x82,0x03,
+0x82,0x04,0x82,0x06,0x81,0x06,0x81,0x02,0x83,0x04,0x84,0x01,0x82,0x18,0x83,
+0x05,0x88,0x05,0x83,0x07,0x82,0x05,0x81,0x02,0x81,0x02,0x82,0x03,0x82,0x02,
+0x81,0x04,0x85,0x05,0x82,0x08,0x82,0x04,0x82,0x03,0x86,0x04,0x87,0x02,0x82,
+0x08,0x88,0x04,0x82,0x0b,0x82,0x03,0x84,0x07,0x82,0x07,0x82,0x01,0x81,0x01,
+0x81,0x01,0x81,0x02,0x82,0x01,0x81,0x02,0x82,0x02,0x82,0x05,0x81,0x03,0x82,
+0x02,0x83,0x02,0x82,0x05,0x81,0x02,0x85,0x06,0x84,0x09,0x82,0x04,0x82,0x04,
+0x82,0x03,0x82,0x02,0x82,0x03,0x81,0x01,0x83,0x02,0x81,0x05,0x82,0x07,0x84,
+0x07,0x82,0x07,0x82,0x09,0x82,0x09,0x82,0x05,0x82,0x02,0x82,0x19,0x85,0x03,
+0x82,0x04,0x82,0x02,0x82,0x08,0x82,0x04,0x82,0x02,0x82,0x04,0x82,0x04,0x82,
+0x06,0x82,0x04,0x82,0x02,0x82,0x03,0x82,0x06,0x82,0x09,0x82,0x05,0x84,0x09,
+0x82,0x04,0x82,0x01,0x82,0x02,0x81,0x02,0x82,0x03,0x82,0x03,0x82,0x04,0x82,
+0x02,0x82,0x04,0x82,0x02,0x82,0x04,0x82,0x03,0x82,0x07,0x83,0x09,0x82,0x06,
+0x82,0x03,0x82,0x04,0x82,0x02,0x82,0x03,0x81,0x01,0x83,0x02,0x81,0x04,0x84,
+0x05,0x82,0x02,0x82,0x06,0x82,0x06,0x83,0x09,0x82,0x09,0x83,0x04,0x83,0x03,
+0x81,0x23,0x82,0x0e,0x89,0x05,0x84,0x06,0x81,0x01,0x82,0x03,0x82,0x02,0x82,
+0x10,0x82,0x0a,0x82,0x0e,0x88,0x23,0x81,0x06,0x82,0x04,0x82,0x05,0x82,0x07,
+0x82,0x0b,0x82,0x03,0x82,0x03,0x82,0x08,0x82,0x03,0x82,0x04,0x82,0x05,0x82,
+0x05,0x82,0x03,0x83,0x08,0x82,0x16,0x83,0x16,0x83,0x04,0x82,0x06,0x81,0x02,
+0x81,0x01,0x83,0x03,0x81,0x03,0x82,0x03,0x82,0x02,0x82,0x04,0x82,0x08,0x82,
+0x04,0x82,0x03,0x82,0x08,0x82,0x07,0x82,0x03,0x83,0x02,0x82,0x04,0x82,0x04,
+0x82,0x0b,0x82,0x03,0x84,0x07,0x82,0x07,0x82,0x01,0x83,0x01,0x81,0x02,0x82,
+0x01,0x82,0x01,0x82,0x02,0x82,0x05,0x81,0x03,0x86,0x03,0x82,0x05,0x81,0x02,
+0x82,0x01,0x82,0x08,0x84,0x07,0x82,0x04,0x82,0x04,0x82,0x03,0x82,0x02,0x81,
+0x04,0x81,0x01,0x83,0x01,0x82,0x04,0x83,0x08,0x82,0x08,0x81,0x08,0x82,0x0a,
+0x81,0x09,0x82,0x05,0x81,0x04,0x81,0x18,0x82,0x02,0x82,0x03,0x82,0x04,0x82,
+0x02,0x82,0x08,0x82,0x04,0x82,0x02,0x88,0x04,0x82,0x06,0x82,0x04,0x82,0x02,
+0x82,0x03,0x82,0x06,0x82,0x09,0x82,0x05,0x84,0x09,0x82,0x04,0x82,0x01,0x82,
+0x02,0x81,0x02,0x82,0x03,0x82,0x03,0x82,0x04,0x82,0x02,0x82,0x04,0x82,0x02,
+0x82,0x04,0x82,0x03,0x82,0x08,0x85,0x06,0x82,0x06,0x82,0x03,0x82,0x04,0x82,
+0x02,0x81,0x04,0x81,0x01,0x81,0x01,0x82,0x01,0x81,0x05,0x82,0x06,0x82,0x02,
+0x81,0x07,0x81,0x09,0x82,0x08,0x82,0x08,0x82,0x05,0x82,0x01,0x82,0x02,0x81,
+0x23,0x82,0x10,0x81,0x02,0x82,0x07,0x82,0x01,0x82,0x04,0x82,0x01,0x81,0x04,
+0x82,0x03,0x83,0x0e,0x82,0x0a,0x82,0x11,0x82,0x25,0x82,0x06,0x82,0x04,0x82,
+0x05,0x82,0x06,0x82,0x0c,0x82,0x03,0x88,0x07,0x82,0x03,0x82,0x04,0x82,0x05,
+0x81,0x06,0x82,0x04,0x82,0x08,0x81,0x18,0x83,0x14,0x83,0x05,0x82,0x06,0x82,
+0x02,0x82,0x01,0x81,0x02,0x87,0x03,0x82,0x03,0x82,0x03,0x82,0x08,0x82,0x04,
+0x82,0x03,0x82,0x08,0x82,0x07,0x82,0x04,0x82,0x02,0x82,0x04,0x82,0x04,0x82,
+0x0b,0x82,0x03,0x82,0x01,0x82,0x06,0x82,0x07,0x82,0x01,0x82,0x02,0x81,0x02,
+0x82,0x02,0x84,0x02,0x82,0x05,0x81,0x03,0x82,0x07,0x82,0x05,0x81,0x02,0x82,
+0x02,0x82,0x0a,0x82,0x06,0x82,0x04,0x82,0x04,0x82,0x04,0x81,0x01,0x82,0x04,
+0x81,0x01,0x81,0x01,0x84,0x04,0x81,0x01,0x82,0x07,0x82,0x07,0x82,0x08,0x82,
+0x0a,0x82,0x08,0x82,0x04,0x82,0x04,0x81,0x17,0x82,0x03,0x82,0x03,0x82,0x04,
+0x82,0x02,0x82,0x08,0x82,0x04,0x82,0x02,0x82,0x0a,0x82,0x06,0x82,0x04,0x82,
+0x02,0x82,0x03,0x82,0x06,0x82,0x09,0x82,0x05,0x82,0x01,0x82,0x08,0x82,0x04,
+0x82,0x01,0x82,0x02,0x81,0x02,0x82,0x03,0x82,0x03,0x82,0x04,0x82,0x02,0x82,
+0x04,0x82,0x02,0x82,0x04,0x82,0x03,0x82,0x0b,0x83,0x05,0x82,0x06,0x82,0x03,
+0x82,0x05,0x81,0x01,0x82,0x04,0x81,0x01,0x81,0x01,0x84,0x04,0x84,0x06,0x84,
+0x06,0x82,0x09,0x82,0x08,0x82,0x08,0x82,0x05,0x81,0x03,0x83,0x36,0x81,0x02,
+0x81,0x08,0x82,0x01,0x82,0x04,0x81,0x02,0x81,0x04,0x82,0x03,0x83,0x0e,0x82,
+0x0a,0x81,0x12,0x82,0x25,0x81,0x08,0x81,0x04,0x81,0x06,0x82,0x06,0x81,0x0d,
+0x82,0x08,0x82,0x08,0x82,0x04,0x81,0x04,0x81,0x05,0x82,0x06,0x82,0x04,0x82,
+0x07,0x82,0x1a,0x83,0x04,0x88,0x04,0x83,0x10,0x81,0x08,0x81,0x05,0x82,0x02,
+0x82,0x03,0x82,0x04,0x82,0x07,0x82,0x04,0x82,0x03,0x82,0x08,0x82,0x08,0x82,
+0x03,0x82,0x02,0x82,0x04,0x82,0x04,0x82,0x0b,0x82,0x03,0x82,0x02,0x82,0x05,
+0x82,0x07,0x82,0x02,0x81,0x02,0x81,0x02,0x82,0x02,0x84,0x02,0x82,0x04,0x82,
+0x03,0x82,0x07,0x82,0x04,0x82,0x02,0x82,0x02,0x82,0x0a,0x82,0x06,0x82,0x04,
+0x82,0x04,0x82,0x04,0x84,0x04,0x83,0x02,0x82,0x04,0x82,0x02,0x82,0x06,0x82,
+0x06,0x82,0x09,0x82,0x0b,0x81,0x08,0x82,0x04,0x81,0x05,0x82,0x16,0x82,0x03,
+0x82,0x03,0x82,0x04,0x81,0x03,0x82,0x08,0x82,0x04,0x82,0x02,0x82,0x0a,0x82,
+0x06,0x82,0x04,0x82,0x02,0x82,0x03,0x82,0x06,0x82,0x09,0x82,0x05,0x82,0x01,
+0x83,0x07,0x82,0x04,0x82,0x01,0x82,0x02,0x81,0x02,0x82,0x03,0x82,0x03,0x82,
+0x04,0x82,0x02,0x82,0x04,0x81,0x03,0x82,0x04,0x82,0x03,0x82,0x0c,0x82,0x05,
+0x82,0x06,0x82,0x03,0x82,0x05,0x84,0x04,0x83,0x02,0x82,0x04,0x82,0x01,0x82,
+0x06,0x83,0x06,0x82,0x0a,0x82,0x08,0x82,0x08,0x82,0x42,0x81,0x02,0x81,0x06,
+0x81,0x01,0x84,0x04,0x81,0x03,0x82,0x04,0x82,0x02,0x83,0x0f,0x81,0x09,0x82,
+0x12,0x82,0x08,0x82,0x12,0x82,0x06,0x82,0x08,0x82,0x02,0x82,0x06,0x82,0x05,
+0x82,0x09,0x81,0x02,0x82,0x09,0x82,0x04,0x81,0x02,0x82,0x05,0x82,0x02,0x82,
+0x05,0x82,0x07,0x82,0x02,0x82,0x04,0x81,0x02,0x82,0x07,0x82,0x08,0x83,0x09,
+0x83,0x0c,0x83,0x12,0x83,0x02,0x81,0x03,0x81,0x05,0x82,0x02,0x82,0x03,0x82,
+0x04,0x83,0x03,0x81,0x02,0x82,0x02,0x83,0x04,0x82,0x08,0x82,0x08,0x83,0x02,
+0x82,0x02,0x82,0x04,0x82,0x04,0x82,0x07,0x81,0x02,0x82,0x04,0x82,0x03,0x82,
+0x04,0x82,0x07,0x82,0x05,0x81,0x02,0x82,0x03,0x83,0x03,0x82,0x02,0x83,0x03,
+0x82,0x08,0x82,0x02,0x83,0x02,0x82,0x03,0x82,0x03,0x82,0x03,0x82,0x07,0x82,
+0x05,0x82,0x02,0x82,0x05,0x83,0x05,0x83,0x02,0x82,0x03,0x82,0x04,0x82,0x05,
+0x82,0x05,0x82,0x0a,0x82,0x0b,0x81,0x08,0x82,0x22,0x82,0x02,0x83,0x03,0x83,
+0x02,0x82,0x04,0x82,0x03,0x81,0x04,0x82,0x01,0x84,0x03,0x82,0x03,0x81,0x05,
+0x82,0x07,0x82,0x01,0x84,0x02,0x82,0x03,0x82,0x06,0x82,0x09,0x82,0x05,0x82,
+0x02,0x83,0x06,0x82,0x04,0x82,0x01,0x82,0x02,0x81,0x02,0x82,0x03,0x82,0x04,
+0x82,0x02,0x82,0x03,0x83,0x02,0x82,0x04,0x82,0x01,0x84,0x03,0x82,0x07,0x82,
+0x02,0x83,0x05,0x82,0x06,0x87,0x05,0x83,0x05,0x83,0x02,0x82,0x04,0x81,0x03,
+0x82,0x06,0x82,0x05,0x82,0x0b,0x82,0x08,0x82,0x08,0x82,0x30,0x82,0x0f,0x82,
+0x01,0x82,0x06,0x85,0x04,0x81,0x05,0x82,0x04,0x84,0x01,0x81,0x0f,0x82,0x08,
+0x81,0x13,0x82,0x08,0x82,0x12,0x82,0x06,0x81,0x0a,0x84,0x04,0x88,0x02,0x87,
+0x04,0x84,0x0a,0x82,0x04,0x84,0x07,0x84,0x06,0x82,0x08,0x84,0x05,0x84,0x08,
+0x82,0x08,0x83,0x0b,0x81,0x0c,0x81,0x0b,0x82,0x08,0x85,0x02,0x82,0x06,0x81,
+0x02,0x86,0x07,0x85,0x02,0x86,0x05,0x87,0x03,0x82,0x0a,0x85,0x02,0x82,0x04,
+0x82,0x02,0x87,0x04,0x84,0x05,0x82,0x04,0x82,0x03,0x87,0x02,0x82,0x05,0x81,
+0x02,0x82,0x03,0x83,0x04,0x85,0x04,0x82,0x09,0x85,0x03,0x82,0x04,0x82,0x02,
+0x86,0x08,0x82,0x06,0x84,0x07,0x82,0x05,0x83,0x02,0x82,0x02,0x82,0x05,0x82,
+0x05,0x82,0x05,0x88,0x04,0x82,0x0b,0x82,0x07,0x82,0x23,0x83,0x02,0x82,0x02,
+0x81,0x01,0x84,0x06,0x85,0x04,0x84,0x01,0x82,0x04,0x85,0x05,0x82,0x07,0x84,
+0x01,0x82,0x02,0x82,0x03,0x82,0x06,0x82,0x09,0x82,0x05,0x82,0x03,0x82,0x06,
+0x82,0x04,0x82,0x01,0x82,0x02,0x81,0x02,0x82,0x03,0x82,0x05,0x84,0x04,0x86,
+0x05,0x84,0x01,0x82,0x03,0x82,0x07,0x86,0x07,0x84,0x04,0x83,0x01,0x82,0x06,
+0x82,0x05,0x82,0x03,0x82,0x03,0x82,0x04,0x82,0x05,0x82,0x05,0x87,0x06,0x82,
+0x08,0x82,0x08,0x82,0x4e,0x82,0x27,0x82,0x06,0x82,0x1e,0x81,0x19,0x82,0x7a,
+0x82,0x7f,0x5c,0x83,0x5e,0x82,0x0c,0x81,0x07,0x82,0x0d,0x89,0x4e,0x81,0x1b,
+0x82,0x36,0x82,0x0e,0x82,0x4b,0x81,0x13,0x82,0x08,0x82,0x08,0x82,0x78,0x83,
+0x02,0x83,0x1e,0x82,0x19,0x81,0x7a,0x82,0x7f,0x5f,0x81,0x5e,0x85,0x09,0x82,
+0x02,0x86,0x5f,0x81,0x03,0x82,0x17,0x81,0x02,0x82,0x37,0x82,0x0e,0x82,0x4a,
+0x82,0x14,0x83,0x06,0x82,0x05,0x84,0x7f,0x20,0x81,0x7f,0x16,0x81,0x7f,0x7f,
+0x7f,0x38,0x85,0x18,0x84,0x38,0x82,0x0e,0x82,0x48,0x83,0x7f,0x7f,0x7f,0x7f,
+0x7f,0x7f,0x7f,0x7f,0x1d,
+0x00,
+  }
+};
